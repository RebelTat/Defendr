const crypto = require('crypto');
const chalk = require('chalk');
const request = require('request-promise-native');

/**
 * Hashes a string. Uses as the ?state= query parameter to prevent CSRF forgery during OAuth exchange
 * @param input String input string
 * @returns {string} output hashed string
 */
const hash = input => new Buffer(crypto.createHash('sha256').update(input).digest('hex')).toString('base64');

/**
 * Retrieves the OAuth access token given the unique code generated by nest after the user has validated their permissions.
 * @param code String Nest code retrieved from the Authorization URL redirect
 * @returns {Promise<any>}
 */
const getAccessToken = async code => JSON.parse(await request.post(`https://api.home.nest.com/oauth2/access_token?client_id=${process.env.NEST_CLIENT_ID}&client_secret=${process.env.NEST_CLIENT_SECRET}&code=${code}&grant_type=authorization_code`));


/**
 * Uploads an image Buffer to AWS Rekognition for processing. Rekognition will return a series of labels for different items that
 * it detects within the image.
 * @param rekognition AWS Rekognition object
 * @param url URL to retrieve image from
 * @returns {Promise<PromiseResult<Rekognition.DetectLabelsResponse, AWSError>>}
 */
const getRekognitionLabels = async (rekognition, url) => {
    console.log(url);
    const imageBuffer = new Buffer(await request({ uri: url, method: 'GET', encoding: null }));
    const params = {
        Image: {
            Bytes: imageBuffer,
        },
    };

    try {
       const labels = await rekognition.detectLabels(params).promise();
       return labels;
    } catch(err) {
        console.log(chalk.red('[ERROR] Failed to Detect Image labels', err.message));
        throw err;
    }
};

module.exports = {
    hash,
    getAccessToken,
    putKinesisItem,
    getRekognitionLabels
};
